<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tarena.dao.UserMapper">
	<!-- namespace:命名空间,用来定sql语句
	     com.tarena.dao.UserMapper.findUserByPage
	     com.tarena.dao.UserMapper.findUserById
	     com.tarena.dao.UserMapper.addUser
	     一般情况下,namespace代表某一个模块
	     命名空间实际上不是具体目录,是一个虚拟名称
	     com.tarena.dao.UserMapper 定位接口
	     findUserByPage  对应接口中方法名称,也是节点的id的名称
	     findUserById    对应接口中方法名称,也是节点的id的名称
	     addUser         对应接口中方法名称,也是节点的id的名称
	 -->
	<!-- 
		resultMap:结果映射,在实体中的setter方法的去掉set,第一个字母小写后的值
		                          跟结果集的列名字不相等(忽略大小写的),需要结果映射
		          实体中的setter方法和结果集的列名字不匹配
		property:名称第一个字母大写前面加上set后的名称在 type对应的类里有setter方法
		column:是查询出来的结果集的列名字           
		id:用来给其他的select节点使用的        
		autoMapping="true",如果实体的setter和结果集类名字忽略大小写且相同     
		            <result>节点就不需要写了  
	 -->
	<resultMap type="User" id="usermap" autoMapping="true">
		<id property="id" column="id"/>
	    <result property="userName" column="username"/>
	    <result property="userPassword" column="userpassword"/>
	    <result property="age" column="age"/>
	    <!-- 一端 -->
	    <association property="group" 
	                 javaType="Group">
	         <id property="id" column="id"/>
		     <result property="groupName" column="name" />
		     <result property="groupLoc" column="loc" />  
	    </association>
	</resultMap>
	<!-- group的resultMap -->
	<resultMap type="Group" id="groupmap">
		<id property="id" column="id"/>
		<result property="groupName" column="name" />
		<result property="groupLoc" column="loc" />
		<!-- 多端 -->
		<collection property="users"
		            javaType="java.util.List"
		            ofType="User">
			<id property="id" column="uid"/>
		    <result property="userName" column="username"/>
		    <result property="userPassword" column="userpassword"/>
		    <result property="age" column="age"/>		
		</collection>
	</resultMap>
	
	<!-- 对一查询 -->
	<select id="findUser_ForOneGroup"
	        resultMap="usermap">
		select 
		    u.id,u.username,u.userpassword,u.age,
		    g.name,g.loc
		from t_user u
		left join t_group g
		   on u.group_id=g.id
		    
	</select>
	
	<!-- 对多查询 -->
	<select id="findGroup_ForManyUser"
	        resultMap="groupmap" >
		select g.id,g.name,
		       u.id uid,u.username,u.age
		from t_group g
		left join t_user u
		   on u.group_id=g.id 
	</select>
	
	
    <sql id="select_user">
    	select 
    	   id,
    	   username,
    	   userpassword,
    	   age
    	from t_user
    </sql>
    
	<!-- 根据id查询用户信息
		id:定义sql语句
		parameterType:参数的类型
		resultType:结果类型,名称的对应
		           结果集的列名字第一个字母大写,前面连接set,
		    去对应的实体类中寻找setter方法就注入
		    如果没有,存储null 不报异常
	 -->
    <select id="findUserById" 
            parameterType="int"
            resultMap="usermap" >
    	<include refid="select_user"></include>
    	where id=#{id}
    </select>
    
    <!-- 分页查询 -->
    <select id="findUserByPage" 
            parameterType="Page"
            resultType="User">
            
    	<include refid="select_user"></include>
    	where username like #{keyword}
    	limit #{begin},#{pageSize}
    </select>
    
   
    
    <!-- 增加  keyProperty="id"   setId() -->
    <insert id="addUser" 
            parameterType="User"
            keyProperty="id"  
            useGeneratedKeys="true">
    	insert into t_user
    	(username,userpassword,age)
    	values
    	(
    	 #{userName},#{userPassword},#{age}
    	)
    </insert>
    <!-- 修改 -->
    <update id="updateUser" parameterType="hashmap" >
      update t_user set 
               username=#{uname},
               userpassword=#{upwd},
               age=#{age}
      where id=#{id}
    </update>
    <!-- 删除 -->
    <delete id="deleteUser" parameterType="int">
    	delete from t_user where id=#{id}
    
    </delete>   
    <!-- if标签 
         如果if条件为真值,就把and条件连接上  where age=#{age} and username=#{uname}
    如如果条件为假值,条件就不连接了
    -->
    <select id="findUserByIf" 
            resultMap="usermap"
            parameterType="hashmap">
        <include refid="select_user"></include>
        where age=#{age}
        <if test="uname != null">
        	and username=#{uname}
        </if>
    </select>
    <!-- choose when otherwise -->
    <select id="findUserByChoose"
            resultMap="usermap"
            parameterType="User">
    	<include refid="select_user"></include>
    	where age=#{age}
    	<choose>
    		<when test="userName !=null">
    			and username like #{userName}
    		</when>
    		<otherwise>
    			and username like '%b%'
    		</otherwise>
    	</choose>
    </select>
    <!-- where标签  
       如果标签中的条件一个都不成立,就不会给sql语句添加where条件,不会添加where关键字
       如果有至少有一个条件成立,会添加where关键字
       如果第一个条件不成(age)  第二条件成立(username) 会自动where后的and
      -->
    <select id="findUserByWhere"
            resultMap="usermap"
            parameterType="hashmap" >
    	<include refid="select_user"></include>
    	<where>
    		<if test="age != 0">
    			age=#{age}
    		</if>
    		<if test="uname !=null">
    			and username=#{uname}
    		</if>
    		<if test="upwd !=null">
    			and userpassword=#{upwd}
    		</if>
    	</where>
    </select>
    
    <!-- trim标签 控制前缀和后缀,设定如何取消多余的前缀和后缀
    	prefix:前缀
    	prefixOverrides:去掉多余的前缀        overrides覆盖掉
    	suffix:后缀
    	suffixOverrides:去掉多余的后缀         overrides覆盖掉
    -->
    <select id="findUserByTrim1"
            parameterType="hashmap"
            resultMap="usermap">
    	<include refid="select_user"></include>
    	<trim prefix="WHERE" prefixOverrides="AND|OR ">
			<if test="age != 0">
    			age=#{age}
    		</if>
    		<if test="uname !=null">
    			and username=#{uname}
    		</if>
    		<if test="upwd !=null">
    			and userpassword=#{upwd}
    		</if>
		</trim>
    </select>
    
    <!-- set标签 
    如果第一个和第三个条件都不成立,最后的逗号会自动取消
  如果一个条件都不成立,就更新列
    -->
    <update id="updateUserBySet"
            parameterType="User">
    	update t_user
    	<set>
    		<if test="userName != null">
    			username=#{userName},
    		</if>
    		<if test="userPassword != null">
    			userpassword=#{userPassword},
    		</if>
    		<if test="age != 0">
    			age=#{age}
    		</if>
    	</set>
        where id=#{id}
    </update>
    
    <!-- trim 用法 -->
    <update id="updateUserByTrim2"
            parameterType="User">
    	update t_user
    	<trim prefix="SET" suffixOverrides=",">
			<if test="userName != null">
    			username=#{userName},
    		</if>
    		<if test="userPassword != null">
    			userpassword=#{userPassword},
    		</if>
    		<if test="age != 0">
    			age=#{age}
    		</if>
		</trim>
        where id=#{id}
    </update>
    
    <!-- foreach循环标签 
    	collection(集合):可以取list,array,map,set   是mybatis类型
    	open:开始符号
    	close：结束符号
    	separator：数据之间分隔符号
    	item:遍历数据名称    item="id"  #{id}
    -->
    <select id="findUserByIds"
            resultMap="usermap"
            parameterType="list">
        <include refid="select_user"></include>
        where id in
        <foreach collection="list" 
                 open="("
                 close=")"
                 separator="," 
                 item="id">
        	#{id}
        </foreach>
    </select>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <delete id="">
    	delete from t_user where id in(1,2,3)
    </delete>
    
    
    
    
    
    
    
    
    
     
      
    	
</mapper>