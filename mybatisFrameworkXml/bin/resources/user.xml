<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xxx.yyy.zzz">
	<delete id="" ></delete>
	<!-- namespace:命名空间,用来定sql语句 xxx.yyy.zzz.findAllUsers xxx.yyy.zzz.findUserById 
		一般情况下,namespace代表某一个模块 命名空间实际上不是具体目录,是一个虚拟名称 -->
	<!-- id:用来定位sql语句 resultType：返回结果的类型 com.tarena.entity.User -->
	<select id="findAllUsers" resultType="User" >
		select
		id,
		username,
		userpassword
		from
		t_user
	</select>
	<!-- 根据id查询用户信息 id:定义sql语句 parameterType:参数的类型 resultType:结果类型,名称的对应 结果集的列名字第一个字母大写,前面连接set, 
		去对应的实体类中寻找setter方法就注入 如果没有,存储null 不报异常 -->
	<select id="findUserById" parameterType="int" resultType="User">
		select
		id,
		username,
		userpassword
		from t_user
		where id=#{id}
	</select>
	
	 <!-- 分页查询 -->
    <select id="findUserByPage1" 
            parameterType="Page"
            resultType="User">
    	select id,username,userpassword
    	from  t_user
    	where username like #{keyword}
    	limit #{currentPage},#{pageSize}
    </select>
    
     <select id="findUserByPage2" 
            parameterType="page"
            resultType="hashmap">
    	select id,username uname,userpassword
    	from  t_user
    	where username like #{keyword}
    	limit #{begin},#{pageSize}
    </select>
    
    <insert id="addUser" 
            parameterType="User"
            keyProperty="id"  
            useGeneratedKeys="true" >
    	insert into t_user
    	(username,userpassword)
    	values
    	(
    	 #{username},#{userpassword}
    	)
    </insert>
    <!-- 删除 -->
    <delete id="deleteUser" parameterType="int">
    	delete from t_user where id=#{id}
    
    </delete>  
     <!-- 修改 -->
    <update id="updateUser" parameterType="hashmap" >
      update t_user set 
               username=#{uname},
               userpassword=#{upwd}
      where id=#{id}
    </update> 
</mapper>
